{"ast":null,"code":"var _jsxFileName = \"/Users/guillaume/desktop-tutorial/P14_22_09_2021/src/components/TableEmployee.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport firebase from \"../utils/firebaseConfig\";\nimport { useTable, useSortBy, useGlobalFilter, useAsyncDebounce } from \"react-table\";\nimport columns from \"../data/table\";\nimport globalFilter from './GlobalFilter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TableEmployee = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const tableDB = firebase.database().ref(\"create-employee\");\n    tableDB.on(\"value\", snapshot => {\n      let previousTable = snapshot.val();\n      let list = [];\n\n      for (let id in previousTable) {\n        list.push({\n          id,\n          ...previousTable[id]\n        });\n      }\n\n      setData(list);\n      console.log(data);\n    });\n  }, []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data,\n    state: {\n      globalFilter\n    },\n    visibleColumns,\n    setGlobalFilter\n  }, useGlobalFilter, useSortBy);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalFilter, {\n      preGlobalFilteredRows: preGlobalFilteredRows,\n      globalFilter: globalFilter,\n      setGlobalFilter: setGlobalFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n            children: [column.render(\"Header\"), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: column.isSorted ? column.isSortedDesc ? \"⬇️\" : \" ⬆️\" : '↕️'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render(\"Cell\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TableEmployee, \"4VRrYOh0SFj7I0L7OQO8oV+NIVo=\", false, function () {\n  return [useTable];\n});\n\n_c = TableEmployee;\nexport default TableEmployee;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableEmployee\");","map":{"version":3,"sources":["/Users/guillaume/desktop-tutorial/P14_22_09_2021/src/components/TableEmployee.jsx"],"names":["React","useEffect","useState","firebase","useTable","useSortBy","useGlobalFilter","useAsyncDebounce","columns","globalFilter","TableEmployee","data","setData","tableDB","database","ref","on","snapshot","previousTable","val","list","id","push","console","log","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","visibleColumns","setGlobalFilter","preGlobalFilteredRows","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport firebase from \"../utils/firebaseConfig\";\nimport { useTable, useSortBy, useGlobalFilter,useAsyncDebounce } from \"react-table\";\nimport columns from \"../data/table\";\nimport globalFilter from './GlobalFilter'\nconst TableEmployee = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const tableDB = firebase.database().ref(\"create-employee\");\n\n    tableDB.on(\"value\", (snapshot) => {\n      let previousTable = snapshot.val();\n      let list = [];\n      for (let id in previousTable) {\n        list.push({ id, ...previousTable[id] });\n      }\n\n      setData(list);\n      console.log(data);\n    });\n  }, []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      state: { globalFilter },\n      visibleColumns,\n     setGlobalFilter\n    },\n    useGlobalFilter,\n   useSortBy\n  );\n\n  return (\n      <>\n    <GlobalFilter\n    preGlobalFilteredRows={preGlobalFilteredRows}\n    globalFilter={globalFilter}\n    setGlobalFilter={setGlobalFilter}\n  />\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                {column.render(\"Header\")}\n                <span>\n                  {column.isSorted\n                    ? column.isSortedDesc\n                      ? \"⬇️\"\n                      : \" ⬆️\"\n                    :  '↕️'}\n                </span>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map((cell) => {\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n    </>\n  );\n};\n\nexport default TableEmployee;\n"]},"metadata":{},"sourceType":"module"}