{"ast":null,"code":"var _jsxFileName = \"/Users/guillaume/desktop-tutorial/P14_22_09_2021/src/components/table/TableEmployee.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport firebase from \"../../utils/firebaseConfig\";\nimport { TableInstance } from \"./TableInstance\";\nimport GlobalFilterTable from \"./GlobalFilterTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TableEmployee = () => {\n  _s();\n\n  const [data, setData] = useState([]); // get data with firebase\n\n  useEffect(() => {\n    const tableDB = firebase.database().ref(\"create-employee\");\n    tableDB.on(\"value\", snapshot => {\n      let previousTable = snapshot.val();\n      let list = [];\n\n      for (let id in previousTable) {\n        list.push({\n          id,\n          ...previousTable[id]\n        });\n      }\n\n      setData(list);\n      console.log(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TableInstance, {\n    tableData: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TableEmployee, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = TableEmployee;\nexport default TableEmployee; // const TWO_HUNDRED_MS = 200;\n// function GlobalFilter({\n//   preGlobalFilteredRows,\n//   globalFilter,\n//   setGlobalFilter,\n// }) {\n//   const [value, setValue] = useState(globalFilter);\n//   const onChange = useAsyncDebounce(value => {\n//     setGlobalFilter(value || undefined)\n//   }, TWO_HUNDRED_MS);\n//   return (\n//     <input\n//       value={value || \"\"}\n//       onChange={e => {\n//         setValue(e.target.value);\n//         onChange(e.target.value);\n//       }}\n//       placeholder={`Search`}\n//     />\n//   )\n// }\n//   const TableLayout = ({\n//     getTableProps,\n//     getTableBodyProps,\n//     headerGroups,\n//     rows,\n//     prepareRow,\n//     state: { globalFilter },\n//     visibleColumns,\n//     preGlobalFilteredRows,\n//     setGlobalFilter\n//   }) => {\n//     return (\n//       <table {...getTableProps()}>\n//         <thead>\n//           <tr>\n//             <th\n//               colSpan={visibleColumns.length}\n//             >\n//               <GlobalFilter\n//                 preGlobalFilteredRows={preGlobalFilteredRows}\n//                 globalFilter={globalFilter}\n//                 setGlobalFilter={setGlobalFilter}\n//               />\n//             </th>\n//           </tr>\n//           {headerGroups.map(headerGroup => (\n//             <tr {...headerGroup.getHeaderGroupProps()}>\n//               {headerGroup.headers.map(column => (\n//                 <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n//                   {column.render('Header')}\n//                   <span>\n//                     {column.isSorted\n//                       ? column.isSortedDesc\n//                         ? ' ⬇️'\n//                         : ' ⬆️'\n//                       : ' ↕️'}\n//                   </span>\n//                 </th>\n//               ))}\n//             </tr>\n//           ))}\n//         </thead>\n//         <tbody {...getTableBodyProps()}>\n//           {rows.map((row, i) => {\n//             prepareRow(row)\n//             return (\n//               <tr {...row.getRowProps()}>\n//                 {row.cells.map(cell => {\n//                   return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n//                 })}\n//               </tr>\n//             )\n//           })}\n//         </tbody>\n//       </table>\n//     );\n//   }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"TableEmployee\");","map":{"version":3,"sources":["/Users/guillaume/desktop-tutorial/P14_22_09_2021/src/components/table/TableEmployee.jsx"],"names":["React","useEffect","useState","firebase","TableInstance","GlobalFilterTable","TableEmployee","data","setData","tableDB","database","ref","on","snapshot","previousTable","val","list","id","push","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC,CAD0B,CAE1B;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,OAAO,GAAGN,QAAQ,CAACO,QAAT,GAAoBC,GAApB,CAAwB,iBAAxB,CAAhB;AAEAF,IAAAA,OAAO,CAACG,EAAR,CAAW,OAAX,EAAqBC,QAAD,IAAc;AAChC,UAAIC,aAAa,GAAGD,QAAQ,CAACE,GAAT,EAApB;AACA,UAAIC,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIC,EAAT,IAAeH,aAAf,EAA8B;AAC5BE,QAAAA,IAAI,CAACE,IAAL,CAAU;AAAED,UAAAA,EAAF;AAAM,aAAGH,aAAa,CAACG,EAAD;AAAtB,SAAV;AACD;;AAEDT,MAAAA,OAAO,CAACQ,IAAD,CAAP;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACD,KATD;AAUD,GAbQ,EAaN,EAbM,CAAT;AAeA,sBAAO,QAAC,aAAD;AAAe,IAAA,SAAS,EAAEA;AAA1B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAnBD;;GAAMD,a;;KAAAA,a;AAoBN,eAAeA,aAAf,C,CAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport firebase from \"../../utils/firebaseConfig\";\nimport { TableInstance } from \"./TableInstance\";\n\nimport GlobalFilterTable from \"./GlobalFilterTable\";\n\nconst TableEmployee = () => {\n  const [data, setData] = useState([]);\n  // get data with firebase\n  useEffect(() => {\n    const tableDB = firebase.database().ref(\"create-employee\");\n\n    tableDB.on(\"value\", (snapshot) => {\n      let previousTable = snapshot.val();\n      let list = [];\n      for (let id in previousTable) {\n        list.push({ id, ...previousTable[id] });\n      }\n\n      setData(list);\n      console.log(data);\n    });\n  }, []);\n\n  return <TableInstance tableData={data} />;\n};\nexport default TableEmployee;\n\n\n\n\n\n\n\n\n\n\n\n\n// const TWO_HUNDRED_MS = 200;\n\n// function GlobalFilter({\n//   preGlobalFilteredRows,\n//   globalFilter,\n//   setGlobalFilter,\n// }) {\n//   const [value, setValue] = useState(globalFilter);\n//   const onChange = useAsyncDebounce(value => {\n//     setGlobalFilter(value || undefined)\n//   }, TWO_HUNDRED_MS);\n\n//   return (\n//     <input\n//       value={value || \"\"}\n//       onChange={e => {\n//         setValue(e.target.value);\n//         onChange(e.target.value);\n//       }}\n//       placeholder={`Search`}\n//     />\n//   )\n// }\n\n//   const TableLayout = ({\n//     getTableProps,\n//     getTableBodyProps,\n//     headerGroups,\n//     rows,\n//     prepareRow,\n//     state: { globalFilter },\n//     visibleColumns,\n//     preGlobalFilteredRows,\n//     setGlobalFilter\n//   }) => {\n//     return (\n//       <table {...getTableProps()}>\n//         <thead>\n//           <tr>\n//             <th\n//               colSpan={visibleColumns.length}\n//             >\n//               <GlobalFilter\n//                 preGlobalFilteredRows={preGlobalFilteredRows}\n//                 globalFilter={globalFilter}\n//                 setGlobalFilter={setGlobalFilter}\n//               />\n//             </th>\n//           </tr>\n//           {headerGroups.map(headerGroup => (\n//             <tr {...headerGroup.getHeaderGroupProps()}>\n//               {headerGroup.headers.map(column => (\n//                 <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n//                   {column.render('Header')}\n//                   <span>\n//                     {column.isSorted\n//                       ? column.isSortedDesc\n//                         ? ' ⬇️'\n//                         : ' ⬆️'\n//                       : ' ↕️'}\n//                   </span>\n//                 </th>\n//               ))}\n//             </tr>\n//           ))}\n//         </thead>\n//         <tbody {...getTableBodyProps()}>\n//           {rows.map((row, i) => {\n//             prepareRow(row)\n//             return (\n//               <tr {...row.getRowProps()}>\n//                 {row.cells.map(cell => {\n//                   return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n//                 })}\n//               </tr>\n//             )\n//           })}\n//         </tbody>\n//       </table>\n//     );\n//   }\n\n// }\n"]},"metadata":{},"sourceType":"module"}