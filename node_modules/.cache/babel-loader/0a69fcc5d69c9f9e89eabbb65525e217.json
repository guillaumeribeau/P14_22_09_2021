{"ast":null,"code":"var _jsxFileName = \"/Users/guillaume/desktop-tutorial/P14_22_09_2021/src/components/TableEmployee.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport firebase from \"../utils/firebaseConfig\";\nimport { useTable, useSortBy } from \"react-table\";\nimport columns from \"../data/table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TableEmployee = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const tableDB = firebase.database().ref(\"create-employee\");\n    tableDB.on(\"value\", snapshot => {\n      let previousTable = snapshot.val();\n      let list = [];\n\n      for (let id in previousTable) {\n        list.push({\n          id,\n          ...previousTable[id]\n        });\n      }\n\n      setData(list);\n      console.log(data);\n    });\n  }, []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data,\n    initialState: {\n      globalFilter: \"A\"\n    }\n  }, useGlobalFilter, useSortBy);\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n          children: [column.render(\"Header\"), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: column.isSorted ? column.isSortedDesc ? \" ðŸ”½\" : \" ðŸ”¼\" : \"ðŸ”½\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: rows.map((row, i) => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n          children: row.cells.map(cell => {\n            return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n              children: cell.render(\"Cell\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 24\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TableEmployee, \"4VRrYOh0SFj7I0L7OQO8oV+NIVo=\", false, function () {\n  return [useTable];\n});\n\n_c = TableEmployee;\nexport default TableEmployee;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableEmployee\");","map":{"version":3,"sources":["/Users/guillaume/desktop-tutorial/P14_22_09_2021/src/components/TableEmployee.jsx"],"names":["React","useEffect","useState","firebase","useTable","useSortBy","columns","TableEmployee","data","setData","tableDB","database","ref","on","snapshot","previousTable","val","list","id","push","console","log","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","initialState","globalFilter","useGlobalFilter","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAmC,aAAnC;AACA,OAAOC,OAAP,MAAoB,eAApB;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,OAAO,GAAGP,QAAQ,CAACQ,QAAT,GAAoBC,GAApB,CAAwB,iBAAxB,CAAhB;AAEAF,IAAAA,OAAO,CAACG,EAAR,CAAW,OAAX,EAAqBC,QAAD,IAAc;AAChC,UAAIC,aAAa,GAAGD,QAAQ,CAACE,GAAT,EAApB;AACA,UAAIC,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIC,EAAT,IAAeH,aAAf,EAA8B;AAC5BE,QAAAA,IAAI,CAACE,IAAL,CAAU;AAAED,UAAAA,EAAF;AAAM,aAAGH,aAAa,CAACG,EAAD;AAAtB,SAAV;AACD;;AAEDT,MAAAA,OAAO,CAACQ,IAAD,CAAP;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACD,KATD;AAUD,GAbQ,EAaN,EAbM,CAAT;AAeA,QAAM;AACJc,IAAAA,aADI;AAEJC,IAAAA,iBAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA;AALI,MAMFtB,QAAQ,CAAC;AACXE,IAAAA,OADW;AAEXE,IAAAA,IAFW;AAELmB,IAAAA,YAAY,EAAE;AAChBC,MAAAA,YAAY,EAAE;AADE;AAFT,GAAD,EAMVC,eANU,EAQZxB,SARY,CANZ;AAkBA,sBACE,sBAAWiB,aAAa,EAAxB;AAAA,4BACE;AAAA,gBACCE,YAAY,CAACM,GAAb,CAAkBC,WAAD,iBACd,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,kBACGD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAyBI,MAAD,iBACvB,mBAAQA,MAAM,CAACC,cAAP,CAAsBD,MAAM,CAACE,oBAAP,EAAtB,CAAR;AAAA,qBACGF,MAAM,CAACG,MAAP,CAAc,QAAd,CADH,eAEE;AAAA,sBACGH,MAAM,CAACI,QAAP,GAAmBJ,MAAM,CAACK,YAAP,GAAsB,KAAtB,GAA8B,KAAjD,GAA0D;AAD7D;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADH;AADD;AAAA;AAAA;AAAA;AAAA,YADF,eAeE,sBAAWhB,iBAAiB,EAA5B;AAAA,gBACGE,IAAI,CAACK,GAAL,CAAS,CAACU,GAAD,EAAMC,CAAN,KAAY;AACpBf,QAAAA,UAAU,CAACc,GAAD,CAAV;AACA,4BACE,mBAAQA,GAAG,CAACE,WAAJ,EAAR;AAAA,oBACGF,GAAG,CAACG,KAAJ,CAAUb,GAAV,CAAec,IAAD,IAAU;AACvB,gCAAO,mBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,wBAA8BD,IAAI,CAACP,MAAL,CAAY,MAAZ;AAA9B;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,WAFA;AADH;AAAA;AAAA;AAAA;AAAA,gBADF;AAOD,OATA;AADH;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CAlED;;GAAM9B,a;UAwBAH,Q;;;KAxBAG,a;AAoEN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport firebase from \"../utils/firebaseConfig\";\nimport { useTable, useSortBy} from \"react-table\";\nimport columns from \"../data/table\";\n\nconst TableEmployee = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const tableDB = firebase.database().ref(\"create-employee\");\n\n    tableDB.on(\"value\", (snapshot) => {\n      let previousTable = snapshot.val();\n      let list = [];\n      for (let id in previousTable) {\n        list.push({ id, ...previousTable[id] });\n      }\n\n      setData(list);\n      console.log(data);\n    });\n  }, []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data, initialState: {\n        globalFilter: \"A\",\n      },\n    },\n    useGlobalFilter,\n\n  useSortBy\n  \n  );\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n      {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                {column.render(\"Header\")}\n                <span>\n                  {column.isSorted ? (column.isSortedDesc ? \" ðŸ”½\" : \" ðŸ”¼\") : \"ðŸ”½\"}\n                </span>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map((cell) => {\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default TableEmployee;\n"]},"metadata":{},"sourceType":"module"}