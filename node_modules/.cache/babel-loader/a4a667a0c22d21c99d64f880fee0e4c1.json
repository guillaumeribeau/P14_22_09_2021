{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nimport firebase from \"../utils/firebaseConfig\";\nimport { useTable, useSortBy, useFilters, useGlobalFilter, useAsyncDebounce } from \"react-table\";\nimport columns from \"../data/table\";\nimport globalFilterTable from './GlobalFilterTable';\nimport GlobalFilterTable from \"./GlobalFilterTable\"; // const TableEmployee = () => {\n//   const [data, setData] = useState([]);\n//   useEffect(() => {\n//     const tableDB = firebase.database().ref(\"create-employee\");\n//     tableDB.on(\"value\", (snapshot) => {\n//       let previousTable = snapshot.val();\n//       let list = [];\n//       for (let id in previousTable) {\n//         list.push({ id, ...previousTable[id] });\n//       }\n//       setData(list);\n//       console.log(data);\n//     });\n//   }, []);\n//   const {\n//     getTableProps,\n//     getTableBodyProps,\n//     headerGroups,\n//     rows,\n//     prepareRow,\n//     state,\n//     visibleColumns,\n//     preGlobalFilteredRows,\n//     setGlobalFilter,\n//   } = useTable(\n//     {\n//       columns,\n//       data,\n//      },\n//     useFilters, // useFilters!\n//     useGlobalFilter, // useGlobalFilter!\n//     useSortBy\n//   )\n//   return (\n//       <>\n//     <GlobalFilterTable\n//     globalFilter={globalFilterTable}\n//     setGlobalFilter={setGlobalFilter}\n//   />\n//     <table {...getTableProps()}>\n//       <thead>\n//         {headerGroups.map((headerGroup) => (\n//           <tr {...headerGroup.getHeaderGroupProps()}>\n//             {headerGroup.headers.map((column) => (\n//               <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n//                 {column.render(\"Header\")}\n//                 <span>\n//                   {column.isSorted\n//                     ? column.isSortedDesc\n//                       ? \"⬇️\"\n//                       : \" ⬆️\"\n//                     :  '↕️'}\n//                 </span>\n//               </th>\n//             ))}\n//           </tr>\n//         ))}\n//       </thead>\n//       <tbody {...getTableBodyProps()}>\n//         {rows.map((row, i) => {\n//           prepareRow(row);\n//           return (\n//             <tr {...row.getRowProps()}>\n//               {row.cells.map((cell) => {\n//                 return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n//               })}\n//             </tr>\n//           );\n//         })}\n//       </tbody>\n//     </table>\n//     </>\n//   );\n// };\n// export default TableEmployee;","map":{"version":3,"sources":["/Users/guillaume/desktop-tutorial/P14_22_09_2021/src/components/TableEmployee.jsx"],"names":["React","useEffect","useState","firebase","useTable","useSortBy","useFilters","useGlobalFilter","useAsyncDebounce","columns","globalFilterTable","GlobalFilterTable"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0CC,eAA1C,EAA0DC,gBAA1D,QAAkF,aAAlF;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B,C,CAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport firebase from \"../utils/firebaseConfig\";\nimport { useTable, useSortBy, useFilters, useGlobalFilter,useAsyncDebounce } from \"react-table\";\nimport columns from \"../data/table\";\nimport globalFilterTable from './GlobalFilterTable'\nimport GlobalFilterTable from \"./GlobalFilterTable\";\n\n\n\n// const TableEmployee = () => {\n//   const [data, setData] = useState([]);\n\n//   useEffect(() => {\n//     const tableDB = firebase.database().ref(\"create-employee\");\n\n//     tableDB.on(\"value\", (snapshot) => {\n//       let previousTable = snapshot.val();\n//       let list = [];\n//       for (let id in previousTable) {\n//         list.push({ id, ...previousTable[id] });\n//       }\n\n//       setData(list);\n//       console.log(data);\n//     });\n//   }, []);\n\n//   const {\n//     getTableProps,\n//     getTableBodyProps,\n//     headerGroups,\n//     rows,\n//     prepareRow,\n//     state,\n//     visibleColumns,\n//     preGlobalFilteredRows,\n//     setGlobalFilter,\n//   } = useTable(\n//     {\n//       columns,\n//       data,\n//      },\n//     useFilters, // useFilters!\n//     useGlobalFilter, // useGlobalFilter!\n//     useSortBy\n//   )\n\n\n//   return (\n//       <>\n//     <GlobalFilterTable\n\n//     globalFilter={globalFilterTable}\n//     setGlobalFilter={setGlobalFilter}\n//   />\n//     <table {...getTableProps()}>\n//       <thead>\n//         {headerGroups.map((headerGroup) => (\n//           <tr {...headerGroup.getHeaderGroupProps()}>\n//             {headerGroup.headers.map((column) => (\n//               <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n//                 {column.render(\"Header\")}\n//                 <span>\n//                   {column.isSorted\n//                     ? column.isSortedDesc\n//                       ? \"⬇️\"\n//                       : \" ⬆️\"\n//                     :  '↕️'}\n//                 </span>\n//               </th>\n//             ))}\n//           </tr>\n//         ))}\n//       </thead>\n//       <tbody {...getTableBodyProps()}>\n//         {rows.map((row, i) => {\n//           prepareRow(row);\n//           return (\n//             <tr {...row.getRowProps()}>\n//               {row.cells.map((cell) => {\n//                 return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n//               })}\n//             </tr>\n//           );\n//         })}\n//       </tbody>\n//     </table>\n//     </>\n//   );\n// };\n\n// export default TableEmployee;\n"]},"metadata":{},"sourceType":"module"}