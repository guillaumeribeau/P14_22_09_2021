{"ast":null,"code":"var _jsxFileName = \"/Users/guillaume/desktop-tutorial/P14_22_09_2021/src/components/TableLayout.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport firebase from \"../utils/firebaseConfig\";\nimport { useTable, useSortBy, useFilters, useGlobalFilter, useAsyncDebounce } from \"react-table\";\nimport columns from \"../data/table\";\nimport GlobalFilterTable from \"./GlobalFilterTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TableEmployee = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [data, setData] = useState([]); // get data with firebase\n\n  useEffect(() => {\n    const tableDB = firebase.database().ref(\"create-employee\");\n    tableDB.on(\"value\", snapshot => {\n      let previousTable = snapshot.val();\n      let list = [];\n\n      for (let id in previousTable) {\n        list.push({\n          id,\n          ...previousTable[id]\n        });\n      }\n\n      setData(list);\n      console.log(data);\n    });\n  }, []);\n  const TWO_HUNDRED_MS = 200;\n\n  function GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter\n  }) {\n    _s();\n\n    const [value, setValue] = useState(globalFilter);\n    const onChange = useAsyncDebounce(value => {\n      setGlobalFilter(value || undefined);\n    }, TWO_HUNDRED_MS);\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      value: value || \"\",\n      onChange: e => {\n        setValue(e.target.value);\n        onChange(e.target.value);\n      },\n      placeholder: `Search`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n  _s(GlobalFilter, \"u76gItWTPW4jhTYSCcNG7/LfbyA=\", false, function () {\n    return [useAsyncDebounce];\n  });\n\n  const TableLayout = ({\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state: {\n      globalFilter\n    },\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            colSpan: visibleColumns.length,\n            children: /*#__PURE__*/_jsxDEV(GlobalFilter, {\n              preGlobalFilteredRows: preGlobalFilteredRows,\n              globalFilter: globalFilter,\n              setGlobalFilter: setGlobalFilter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n            children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: column.isSorted ? column.isSortedDesc ? ' ⬇️' : ' ⬆️' : ' ↕️'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 26\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  };\n};\n\n_s2(TableEmployee, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = TableEmployee;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableEmployee\");","map":{"version":3,"sources":["/Users/guillaume/desktop-tutorial/P14_22_09_2021/src/components/TableLayout.jsx"],"names":["React","useEffect","useState","firebase","useTable","useSortBy","useFilters","useGlobalFilter","useAsyncDebounce","columns","GlobalFilterTable","TableEmployee","data","setData","tableDB","database","ref","on","snapshot","previousTable","val","list","id","push","console","log","TWO_HUNDRED_MS","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","value","setValue","onChange","undefined","e","target","TableLayout","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","visibleColumns","length","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","Table"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport firebase from \"../utils/firebaseConfig\";\nimport { useTable, useSortBy, useFilters, useGlobalFilter,useAsyncDebounce } from \"react-table\";\nimport columns from \"../data/table\";\n\nimport GlobalFilterTable from \"./GlobalFilterTable\";\n\n\n\nconst TableEmployee = () => {\n  const [data, setData] = useState([]);\n  // get data with firebase\n  useEffect(() => {\n    const tableDB = firebase.database().ref(\"create-employee\");\n\n    tableDB.on(\"value\", (snapshot) => {\n      let previousTable = snapshot.val();\n      let list = [];\n      for (let id in previousTable) {\n        list.push({ id, ...previousTable[id] });\n      }\n\n      setData(list);\n      console.log(data);\n    });\n  }, []);\n\n\n\n\n\n\n  const TWO_HUNDRED_MS = 200;\n\n  function GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n  }) {\n    const [value, setValue] = useState(globalFilter);\n    const onChange = useAsyncDebounce(value => {\n      setGlobalFilter(value || undefined)\n    }, TWO_HUNDRED_MS);\n  \n    return (\n      <input\n        value={value || \"\"}\n        onChange={e => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`Search`}\n      />\n    )\n  }\n\n\n\n\n\n  const TableLayout = ({\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state: { globalFilter },\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  }) => {\n    return (\n      <table {...getTableProps()}>\n        <thead>\n          <tr>\n            <th\n              colSpan={visibleColumns.length}\n            >\n              <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={globalFilter}\n                setGlobalFilter={setGlobalFilter}\n              />\n            </th>\n          </tr>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render('Header')}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' ⬇️'\n                        : ' ⬆️'\n                      : ' ↕️'}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    );\n  }\n\n}\n\nexport default Table"]},"metadata":{},"sourceType":"module"}